from rest_framework import serializers
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from app_account.models import User, Profile
from django.contrib.auth.password_validation import validate_password


class MyTokenObtainPairSerializer(TokenObtainPairSerializer):
    """
    f you wish to customize the claims contained in web tokens
    which are generated by the TokenObtainPairView and TokenObtainSlidingView views,
    create a subclass for the desired view as well as a subclass for its corresponding
    serializer.

    This follows from the fact that the get_token method above produces the refresh
    token for the view, which is in turn used to generate the viewâ€™s access token.
    """

    @classmethod
    def get_token(cls, user):
        token = super().get_token(user)

        # These information will be added in PAYLOAd of access/refresh Token
        token["full_name"] = user.full_name
        token["email"] = user.email
        token["username"] = user.username
        try:
            token["teacher_id"] = user.teacher.id
        except:
            token["teacher_id"] = 0

        return token


class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(
        write_only=True, required=True, validators=[validate_password]
    )
    password2 = serializers.CharField(write_only=True, required=True)

    class Meta:
        model = User
        fields = ["full_name", "email", "password", "password2"]

    def validate(self, attr):
        if attr["password"] != attr["password2"]:
            raise serializers.ValidationError(
                {"password": "Password fields didn't match."}
            )

        return attr

    def create(self, validated_data):
        user = User.objects.create(
            full_name=validated_data["full_name"],
            email=validated_data["email"],
        )

        email_username, _ = user.email.split("@")
        user.username = email_username
        user.set_password(validated_data["password"])
        user.save()

        return user


class UserSerializer(serializers.ModelSerializer):

    class Meta:
        model = User
        fields = "__all__"


class Profileerializer(serializers.ModelSerializer):

    class Meta:
        model = Profile
        fields = "__all__"
